import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define CNN model for deepfake detection
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D(2,2),
    
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification (Real=0, Fake=1)
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train with deepfake dataset (replace with your dataset path)
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
train_data = datagen.flow_from_directory(r"D:\IDE PROJECTS\Python\hackathon\deepfake recog\dataset", target_size=(128, 128), batch_size=32, class_mode='binary', subset='training')
val_data = datagen.flow_from_directory(r"D:\IDE PROJECTS\Python\hackathon\deepfake recog\dataset", target_size=(128, 128), batch_size=32, class_mode='binary', subset='validation')

model.fit(train_data, validation_data=val_data, epochs=10)
model.save("deepfake_detector.h5")
